---
file: C:/Users/Lucie/git_repositories/spectre_numerique_lucie/execute_luciform.ts
<<<<<<< SEARCH
            searchContent = '';
            const lineNumberMatch = line.match(/:line:(\d+)/);
            if(lineNumberMatch)
            {
                currentSearchStartLine = parseInt(lineNumberMatch[1], 10);
            }
        } else if(line.startsWith('=======') && state === 'in_search')
        {
            searchContent = searchContent.replace(/\n$/, '');
            state = 'in_replace';
            newContent = '';
        } else if(line.startsWith('>>>>>>> REPLACE') && state === 'in_replace')
        {
            if(currentFilePath && currentSearchStartLine)
            {
                operations.push({
                    type: 'search_and_replace',
                    filePath: currentFilePath,
                    startLine: currentSearchStartLine,
                    search: searchContent,
                    replace: newContent.replace(/\n$/, '')
                });
            }
            state = 'idle';
        } else if(line.startsWith('<<<<<<< INSERT'))
        {
            state = 'in_insert';
            const lineNumberMatch = line.match(/:line:(\d+)/);
            if(lineNumberMatch)
            {
                lineNumber = parseInt(lineNumberMatch[1], 10);
            }
            newContent = '';
        } else if(line.startsWith('>>>>>>> INSERT') && state === 'in_insert')
        {
            if(currentFilePath && lineNumber)
            {
                operations.push({type: 'insert', filePath: currentFilePath, lineNumber, newContent: newContent.replace(/\n$/, '')});
            }
            state = 'idle';
        } else if(line.startsWith('<<<<<<< DELETE'))
        {
            const lineRangeMatch = line.match(/:lines:(\d+)-(\d+)/);
            if(lineRangeMatch && currentFilePath)
            {
                startLine = parseInt(lineRangeMatch[1], 10);
                endLine = parseInt(lineRangeMatch[2], 10);
                operations.push({type: 'delete', filePath: currentFilePath, startLine, endLine});
            }
        } else if(line.startsWith('<<<<<<< APPEND'))
        {
            state = 'in_append';
            newContent = '';
        } else if(line.startsWith('>>>>>>> APPEND') && state === 'in_append')
        {
            if(currentFilePath)
            {
                operations.push({type: 'append', filePath: currentFilePath, newContent: newContent.replace(/\n$/, '')});
            }
            state = 'idle';
        } else if(line.startsWith('<<<<<<< CREATE'))
        {
            state = 'in_create';
            newContent = '';
        } else if(line.startsWith('>>>>>>> CREATE') && state === 'in_create')
        {
            if(currentFilePath)
            {
                operations.push({type: 'create_file', filePath: currentFilePath, content: newContent.replace(/\n$/, '')});
            }
            state = 'idle';
        }
        else
        {
            if(state === 'in_search')
            {
                searchContent += line + '\n';
            } else if(state === 'in_replace' || state === 'in_insert' || state === 'in_append' || state === 'in_create')
            {
                newContent += line + '\n';
            }
        }
    }

    return operations;
=======
            searchContent = '';
            const lineNumberMatch = line.match(/:line:(\d+)/);
            if(lineNumberMatch)
            {
                currentSearchStartLine = parseInt(lineNumberMatch[1], 10);
            }
        } else if(line.startsWith('=======') && state === 'in_search')
        {
            searchContent = searchContent.replace(/\r\n/g, '\n').replace(/\n$/, '');
            state = 'in_replace';
            newContent = '';
        } else if(line.startsWith('>>>>>>> REPLACE') && state === 'in_replace')
        {
            if(currentFilePath && currentSearchStartLine)
            {
                operations.push({
                    type: 'search_and_replace',
                    filePath: currentFilePath,
                    startLine: currentSearchStartLine,
                    search: searchContent,
                    replace: newContent.replace(/\r\n/g, '\n').replace(/\n$/, '')
                });
            }
            state = 'idle';
        } else if(line.startsWith('<<<<<<< INSERT'))
        {
            state = 'in_insert';
            const lineNumberMatch = line.match(/:line:(\d+)/);
            if(lineNumberMatch)
            {
                lineNumber = parseInt(lineNumberMatch[1], 10);
            }
            newContent = '';
        } else if(line.startsWith('>>>>>>> INSERT') && state === 'in_insert')
        {
            if(currentFilePath && lineNumber)
            {
                operations.push({type: 'insert', filePath: currentFilePath, lineNumber, newContent: newContent.replace(/\r\n/g, '\n').replace(/\n$/, '')});
            }
            state = 'idle';
        } else if(line.startsWith('<<<<<<< DELETE'))
        {
            const lineRangeMatch = line.match(/:lines:(\d+)-(\d+)/);
            if(lineRangeMatch && currentFilePath)
            {
                startLine = parseInt(lineRangeMatch[1], 10);
                endLine = parseInt(lineRangeMatch[2], 10);
                operations.push({type: 'delete', filePath: currentFilePath, startLine, endLine});
            }
        } else if(line.startsWith('<<<<<<< APPEND'))
        {
            state = 'in_append';
            newContent = '';
        } else if(line.startsWith('>>>>>>> APPEND') && state === 'in_append')
        {
            if(currentFilePath)
            {
                operations.push({type: 'append', filePath: currentFilePath, newContent: newContent.replace(/\r\n/g, '\n').replace(/\n$/, '')});
            }
            state = 'idle';
        } else if(line.startsWith('<<<<<<< CREATE'))
        {
            state = 'in_create';
            newContent = '';
        } else if(line.startsWith('>>>>>>> CREATE') && state === 'in_create')
        {
            if(currentFilePath)
            {
                operations.push({type: 'create_file', filePath: currentFilePath, content: newContent.replace(/\r\n/g, '\n').replace(/\n$/, '')});
            }
            state = 'idle';
        }
        else
        {
            if(state === 'in_search')
            {
                searchContent += line + '\n';
            } else if(state === 'in_replace' || state === 'in_insert' || state === 'in_append' || state === 'in_create')
            {
                newContent += line + '\n';
            }
        }
    }

    return operations;
>>>>>>> REPLACE
