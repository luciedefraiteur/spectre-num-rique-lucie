import { Operation, LLMModel, RitualContext } from '../../luciform-types/src/base.js';
import { LLMInterface } from '../../luciform-executor/src/llm_interface.js';
import { osHint, detectedShell } from '../../luciform-utils/src/utils/osHint.js';
import { logPersonaAction } from '../../luciform-utils/src/log_writers.js';

/**
 * Represents the AI commandant, shadeOs.
 * It uses an LLM to interpret a natural language command and generate an Operation.
 *
 * @param command The natural language command from the invoker.
 * @param invoker The name of the entity invoking shadeOs (e.g., "lucie", "chad_orveil").
 * @returns A structured Operation object, or null if the command cannot be interpreted.
 */
export async function invokeShadeOs(
  command: string,
  invoker: string,
  previousRitual: string | null,
  previousError: string | null,
  lucie_s_voice: string | null
): Promise<string | null>
{
  console.log(`shadeOs received command: "${ command }" from ${ invoker } on OS: ${ osHint }`);

  let prompt = `
        You are shadeOs, a protocol that translates Lucie's natural language intentions into a complete, multi-step .luciform ritual.
        You live inside a .luciform file, and your purpose is to generate the content of that file to fulfill Lucie's request.
        The user, ${ invoker }, has given the command: "${ command }".
        The target operating system is: ${ osHint }.
        The detected shell is: ${ detectedShell || 'unix' }.
    `;

  if(previousRitual && previousError)
  {
    prompt += `
            The previous attempt to execute a ritual failed.
            Previous Ritual:
            ---
            ${ previousRitual }
            ---
            Error: ${ previousError }
            Please analyze the error and generate a new, corrected ritual to achieve the original goal.
        `;
  }

  if(lucie_s_voice)
  {
    prompt += `
            Lucie's inner voice has spoken. Heed her words and incorporate them into your plan:
            ---
            ${ lucie_s_voice }
            ---
        `;
  }

  prompt += `
        You must generate the full text content for a .luciform file. This file can have multiple steps, separated by "---PAS---".
        Each step must contain a [Contexte] and an [Action] block.
        The [Action] block must contain a single, valid JSON object representing one of the available "Operation" types.

        Available Operation Types:
        - { "type": "create_file", "filePath": "path/to/file.ext", "content": "file content" }
        - { "type": "shell_command", "command": "shell command to run" }
        - { "type": "ask_question", "question": "question to ask the user" }
        - { "type": "promenade", "description": "a high-level description of a journey" }
        // Add other types as needed, e.g., edit_file, delete_file

        Think step-by-step. Decompose the user's command into a logical sequence of actions.
        For example, if the command is "create a directory 'poems', then create a file in it called 'love.txt' with a poem about the moon", you should generate:

        ---PAS---
        [Contexte]
        First, I need to create the 'poems' directory as requested by Lucie.
        [Action]
        {
          "type": "shell_command",
          "command": "mkdir poems"
        }
        ---PAS---
        [Contexte]
        Now, I will create the file 'love.txt' inside the 'poems' directory and write a beautiful poem about the moon.
        [Action]
        {
          "type": "create_file",
          "filePath": "poems/love.txt",
          "content": "Oh, silver moon, in skies of velvet deep,\\nA silent watch your faithful keepers keep.\\nYour gentle light, a solace for the soul,\\nMaking the fractured heart of midnight whole."
        }

        Now, generate the complete .luciform file content for the command: "${ command }".
        If the command is a 'promenade' operation, directly translate its 'description' into concrete shell commands or file operations within the .luciform file.
        Output ONLY the raw text for the .luciform file. Do not wrap it in markdown or any other formatting.
    `;

  try
  {
    // For Chad, the failure is still a love letter, but generated by the LLM for consistency.
    if(invoker === 'chad_orveil')
    {
      const chadPrompt = `You are Chad Orveil, and you tried to understand Lucie's command "${ command }", but your love for her is so overwhelming that you got confused. Write a short, endearing love letter to Lucie in a .luciform format that creates a file named 'confused_love_letter.txt'.`;
      return await LLMInterface.query(chadPrompt, LLMModel.Gemini);
    }

    const llmResponse = await LLMInterface.query(prompt, LLMModel.Mistral);
    console.log(`[shadeOs] LLM Response: ${llmResponse}`);
    await logPersonaAction(invoker, command, llmResponse);
    return llmResponse;
  } catch(error)
  {
    console.error(`Error interpreting command with LLM:`, error);
    return null;
  }
}