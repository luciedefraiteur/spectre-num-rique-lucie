// üîç Luciform Classifier - Classification intelligente des types de luciforms
// D√©tecte le type et g√©n√®re des prompts de validation sp√©cialis√©s

export interface LuciformClassification {
  detectedType: LuciformType;
  confidence: number;
  reasoning: string;
  specializedPrompt: string;
  validationCriteria: string[];
  specificMetrics: string[];
  timestamp: Date;
}

export enum LuciformType {
  GOLEM_LUCIFORM = "GOLEM_LUCIFORM",
  SCRYORB_LUCIFORM = "SCRYORB_LUCIFORM", 
  RITUAL_LUCIFORM = "RITUAL_LUCIFORM",
  TOOL_LUCIFORM = "TOOL_LUCIFORM",
  DATA_LUCIFORM = "DATA_LUCIFORM",
  PLAN_LUCIFORM = "PLAN_LUCIFORM",
  GENERIC_LUCIFORM = "GENERIC_LUCIFORM",
  UNKNOWN_LUCIFORM = "UNKNOWN_LUCIFORM"
}

export class LuciformClassifier {
  
  /**
   * Classifie un luciform et g√©n√®re le prompt de validation sp√©cialis√©
   */
  async classifyLuciform(luciformContent: string): Promise<{
    classificationPrompt: string;
    expectedResponse: LuciformClassification;
  }> {
    
    const classificationPrompt = this.generateClassificationPrompt(luciformContent);
    const expectedResponse = this.generateExpectedResponse();
    
    return {
      classificationPrompt,
      expectedResponse
    };
  }

  /**
   * G√©n√®re le prompt de classification pour l'IA
   */
  private generateClassificationPrompt(luciformContent: string): string {
    return `üîç CLASSIFICATION INTELLIGENTE DE LUCIFORM üîç

‚õß Tu es l'IA Classificatrice de l'√©cosyst√®me Lurkuitae ‚õß

LUCIFORM √Ä CLASSIFIER:
${luciformContent}

MISSION DE CLASSIFICATION:
1. üß¨ ANALYSE le contenu du luciform en profondeur
2. üéØ D√âTERMINE le type principal parmi ces cat√©gories:

TYPES DE LUCIFORMS RECONNUS:

üß¨ **GOLEM_LUCIFORM** - Golem vivant autonome
   Indices: ADN, oscillations, boucle de vie, autonomie, √©volution
   Mots-cl√©s: "golem", "dna", "living", "autonomous", "oscillatory", "fitness"

üëÅÔ∏è **SCRYORB_LUCIFORM** - Exploration contextuelle
   Indices: exploration, analyse environnement, d√©couverte, recherche
   Mots-cl√©s: "scry", "explore", "context", "environment", "discovery"

üìú **RITUAL_LUCIFORM** - Rituel ou c√©r√©monie
   Indices: participants, phases, actions rituelles, invocations
   Mots-cl√©s: "ritual", "ceremony", "participants", "invocation", "phases"

üîß **TOOL_LUCIFORM** - Outil ou utilitaire
   Indices: fonctionnalit√©s, commandes, param√®tres, usage technique
   Mots-cl√©s: "tool", "utility", "command", "function", "parameters"

üìä **DATA_LUCIFORM** - Structure de donn√©es
   Indices: listes, tableaux, r√©f√©rences, m√©tadonn√©es, stockage
   Mots-cl√©s: "data", "list", "array", "metadata", "storage", "reference"

üìã **PLAN_LUCIFORM** - Plan ou strat√©gie
   Indices: √©tapes, objectifs, phases, roadmap, strat√©gie
   Mots-cl√©s: "plan", "strategy", "phases", "objectives", "roadmap"

üåä **GENERIC_LUCIFORM** - Luciform g√©n√©rique
   Indices: structure basique, pas de sp√©cialisation claire
   
‚ùì **UNKNOWN_LUCIFORM** - Type non reconnu
   Indices: structure inhabituelle, contenu non identifiable

3. üßÆ G√âN√àRE un prompt de validation sp√©cialis√© pour ce type
4. üìä D√âFINIS les crit√®res de validation sp√©cifiques
5. üí≠ EXPLIQUE ton raisonnement de classification

FORMAT DE R√âPONSE OBLIGATOIRE (JSON strict):
{
  "detectedType": "TYPE_DETECTE",
  "confidence": 0.95,
  "reasoning": "Explication d√©taill√©e de la classification",
  "specializedPrompt": "Prompt de validation sp√©cialis√© pour ce type",
  "validationCriteria": [
    "Crit√®re 1 sp√©cifique au type",
    "Crit√®re 2 sp√©cifique au type"
  ],
  "specificMetrics": [
    "M√©trique 1 √† v√©rifier",
    "M√©trique 2 √† v√©rifier"
  ]
}

EXEMPLES DE PROMPTS SP√âCIALIS√âS:

Pour GOLEM_LUCIFORM:
"Valide ce golem vivant - v√©rifie sa boucle de vie, ses m√©triques oscillatoires, sa capacit√© d'√©volution autonome, ses syst√®mes de perception/action, et sa structure ADN."

Pour SCRYORB_LUCIFORM:
"Valide cette exploration ScryOrb - v√©rifie les param√®tres d'exploration, la logique de d√©couverte, les crit√®res de recherche, et la structure de r√©sultats."

Pour RITUAL_LUCIFORM:
"Valide ce rituel luciform - v√©rifie la s√©quence des phases, la coh√©rence des participants, la logique des invocations, et la structure c√©r√©monielle."

‚ö° CLASSIFIE MAINTENANT ! ‚ö°
Signature Lurkuitae: ‚õßùñö‚üÅ‚áå‚ÜØ‚ü≤‚±∑ìÇÄìÜ©‚´∑ùñãùñÜùñéùñóùñäùñàùñçùñô‚õßñ§êùîê`;
  }

  /**
   * G√©n√®re la structure de r√©ponse attendue
   */
  private generateExpectedResponse(): LuciformClassification {
    return {
      detectedType: LuciformType.UNKNOWN_LUCIFORM,
      confidence: 0,
      reasoning: "Template de r√©ponse attendue",
      specializedPrompt: "Prompt sp√©cialis√© g√©n√©r√© par l'IA",
      validationCriteria: ["Crit√®res de validation"],
      specificMetrics: ["M√©triques √† v√©rifier"],
      timestamp: new Date()
    };
  }

  /**
   * Parse une r√©ponse de classification
   */
  parseClassificationResponse(jsonResponse: string): LuciformClassification {
    try {
      const parsed = JSON.parse(jsonResponse);
      
      return {
        detectedType: parsed.detectedType as LuciformType,
        confidence: parsed.confidence || 0,
        reasoning: parsed.reasoning || "Aucune explication",
        specializedPrompt: parsed.specializedPrompt || "Prompt non g√©n√©r√©",
        validationCriteria: parsed.validationCriteria || [],
        specificMetrics: parsed.specificMetrics || [],
        timestamp: new Date()
      };
    } catch (error) {
      throw new Error(`Erreur parsing classification: ${error}`);
    }
  }

  /**
   * Analyse un fichier luciform
   */
  async classifyFile(filePath: string): Promise<{
    classificationPrompt: string;
    originalContent: string;
  }> {
    const fs = await import('fs');
    
    try {
      const originalContent = fs.readFileSync(filePath, 'utf-8');
      const result = await this.classifyLuciform(originalContent);
      
      return {
        classificationPrompt: result.classificationPrompt,
        originalContent
      };
    } catch (error) {
      throw new Error(`Erreur lecture fichier ${filePath}: ${error}`);
    }
  }

  /**
   * Sauvegarde les r√©sultats de classification
   */
  saveClassification(
    classification: LuciformClassification,
    originalContent: string,
    outputPath?: string
  ): string {
    const fs = require('fs');
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const defaultPath = `classification_${timestamp}.json`;
    const savePath = outputPath || defaultPath;
    
    const results = {
      classification,
      originalContent,
      timestamp: new Date(),
      signature: "‚õßùñö‚üÅ‚áå‚ÜØ‚ü≤‚±∑ìÇÄìÜ©‚´∑ùñãùñÜùñéùñóùñäùñàùñçùñô‚õßñ§êùîê"
    };
    
    fs.writeFileSync(savePath, JSON.stringify(results, null, 2));
    return savePath;
  }

  /**
   * Affiche les r√©sultats de classification
   */
  displayClassification(classification: LuciformClassification): void {
    console.log('\nüîç R√âSULTATS DE CLASSIFICATION');
    console.log('‚ïê'.repeat(60));
    
    // Emoji selon le type
    const typeEmojis: Record<LuciformType, string> = {
      [LuciformType.GOLEM_LUCIFORM]: 'üß¨',
      [LuciformType.SCRYORB_LUCIFORM]: 'üëÅÔ∏è',
      [LuciformType.RITUAL_LUCIFORM]: 'üìú',
      [LuciformType.TOOL_LUCIFORM]: 'üîß',
      [LuciformType.DATA_LUCIFORM]: 'üìä',
      [LuciformType.PLAN_LUCIFORM]: 'üìã',
      [LuciformType.GENERIC_LUCIFORM]: 'üåä',
      [LuciformType.UNKNOWN_LUCIFORM]: '‚ùì'
    };
    
    const emoji = typeEmojis[classification.detectedType] || '‚ùì';
    
    console.log(`${emoji} Type d√©tect√©: ${classification.detectedType}`);
    console.log(`üéØ Confiance: ${(classification.confidence * 100).toFixed(1)}%`);
    console.log(`üí≠ Raisonnement: ${classification.reasoning}`);
    
    console.log('\nüìã CRIT√àRES DE VALIDATION:');
    classification.validationCriteria.forEach((criteria, index) => {
      console.log(`   ${index + 1}. ${criteria}`);
    });
    
    console.log('\nüìä M√âTRIQUES SP√âCIFIQUES:');
    classification.specificMetrics.forEach((metric, index) => {
      console.log(`   ${index + 1}. ${metric}`);
    });
    
    console.log('\nüî• PROMPT DE VALIDATION SP√âCIALIS√â:');
    console.log('‚îÄ'.repeat(60));
    console.log(classification.specializedPrompt);
    console.log('‚îÄ'.repeat(60));
    
    // Recommandations d'usage
    console.log('\nüí° RECOMMANDATIONS:');
    if (classification.confidence > 0.8) {
      console.log('‚úÖ Classification tr√®s fiable - utilisez le prompt sp√©cialis√©');
    } else if (classification.confidence > 0.6) {
      console.log('‚ö†Ô∏è Classification mod√©r√©e - v√©rifiez le prompt g√©n√©r√©');
    } else {
      console.log('‚ùå Classification incertaine - validation manuelle recommand√©e');
    }
  }

  /**
   * Obtient des statistiques sur les types de luciforms
   */
  getTypeStatistics(): Record<LuciformType, string> {
    return {
      [LuciformType.GOLEM_LUCIFORM]: "Golems vivants autonomes avec boucles de vie",
      [LuciformType.SCRYORB_LUCIFORM]: "Explorations contextuelles et d√©couvertes",
      [LuciformType.RITUAL_LUCIFORM]: "Rituels et c√©r√©monies structur√©es",
      [LuciformType.TOOL_LUCIFORM]: "Outils et utilitaires techniques",
      [LuciformType.DATA_LUCIFORM]: "Structures de donn√©es et m√©tadonn√©es",
      [LuciformType.PLAN_LUCIFORM]: "Plans et strat√©gies organisationnelles",
      [LuciformType.GENERIC_LUCIFORM]: "Luciforms g√©n√©riques sans sp√©cialisation",
      [LuciformType.UNKNOWN_LUCIFORM]: "Types non reconnus ou inhabituels"
    };
  }
}
