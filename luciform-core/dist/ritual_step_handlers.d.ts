import { Incantation, RitualContext, CommandOutcome, RitualPlan } from './types/base.js';
import * as fs from 'fs';
export declare function handleTraverse(incantation: Incantation, context: RitualContext, existsSync?: (path: fs.PathLike) => boolean, statSync?: (path: fs.PathLike) => fs.Stats): Promise<any>;
export declare function handleEnact(incantation: Incantation, context: RitualContext, plan: RitualPlan, ask: (q: string) => Promise<string>, runCommand?: (cmd: string, cwd: string, ctx: RitualContext) => Promise<CommandOutcome>): Promise<any>;
export declare function handleDivine(incantation: Incantation, context: RitualContext, index: number, plan: RitualPlan): Promise<any>;
export declare function handleLull(incantation: Incantation, context: RitualContext): Promise<any>;
export declare function handleDiscourse(incantation: Incantation): Promise<any>;
export declare function handleQuery(incantation: Incantation, context: RitualContext, ask: (q: string) => Promise<string>): Promise<any>;
export declare function handleResponse(incantation: Incantation): Promise<any>;
export declare function handlePreExecutionCheck(incantation: Incantation, context: RitualContext): Promise<any>;
export declare function handleUserConfirmation(incantation: Incantation, ask: (q: string) => Promise<string>): Promise<any>;
export declare function handleCodeGeneration(incantation: Incantation): Promise<any>;
export declare function handleAssistedEditing(incantation: Incantation, context: RitualContext, ask: (q: string) => Promise<string>): Promise<any>;
export declare function handleUserInput(incantation: Incantation, ask: (q: string) => Promise<string>): Promise<any>;
export declare function handleStepProposal(incantation: Incantation): Promise<any>;
export declare function handleDreamNavigation(incantation: Incantation, context: RitualContext): Promise<any>;
export declare function handleReflectionNavigation(incantation: Incantation, context: RitualContext): Promise<any>;
export declare function handleAddReflection(incantation: Incantation): Promise<any>;
export declare function handleSurveil(incantation: Incantation, context: RitualContext): Promise<any>;
export declare function handleTerminalCommand(incantation: Incantation, context: RitualContext): Promise<any>;
export declare function handleTerminalOutput(incantation: Incantation): Promise<any>;
export declare function handleTerminalQuestion(incantation: Incantation, ask: (q: string) => Promise<string>): Promise<any>;
