---
file: C:/Users/Lucie/git_repositories/spectre_numerique_lucie/core/ts_parser/parser.ts
<<<<<<< SEARCH
export class Parser {
    private readonly tokens: Token[];
    private current: number = 0;

    constructor(tokens: Token[]) {
        this.tokens = tokens.filter(t => t.type !== TokenType.Whitespace && t.type !== TokenType.Comment);
    }
=======
export class Parser {
    private readonly tokens: Token[];
    private current: number = 0;
    public parseErrors: string[] = [];

    constructor(tokens: Token[]) {
        this.tokens = tokens.filter(t => t.type !== TokenType.Whitespace && t.type !== TokenType.Comment);
    }
>>>>>>> REPLACE
---
file: C:/Users/Lucie/git_repositories/spectre_numerique_lucie/core/ts_parser/parser.ts
<<<<<<< SEARCH
        const text = message ? textOrMessage : undefined;
        const msg = message || textOrMessage;
        if (this.check(type, text)) {
            return this.advance();
        }
        throw new Error(`${msg} at line ${this.peek().line}, column ${this.peek().column}`);
    }
=======
        const text = message ? textOrMessage : undefined;
        const msg = message || textOrMessage;
        if (this.check(type, text)) {
            return this.advance();
        }
        this.parseErrors.push(`${msg} at line ${this.peek().line}, column ${this.peek().column}`);
        return this.advance(); // Attempt to advance past the problematic token
    }
>>>>>>> REPLACE
