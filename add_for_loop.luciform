---file: C:/Users/Lucie/git_repositories/spectre_numerique_lucie/core/ts_parser/parser.ts<<<<<<< SEARCHexport class WhileStatementNode extends ASTNode {    constructor(public condition: ASTNode, public body: ASTNode[]) {        super();    }}=======export class WhileStatementNode extends ASTNode {    constructor(public condition: ASTNode, public body: ASTNode[]) {        super();    }}export class ForStatementNode extends ASTNode {    constructor(public initializer: ASTNode | undefined, public condition: ASTNode | undefined, public increment: ASTNode | undefined, public body: ASTNode[]) {        super();    }}>>>>>>> REPLACE---file: C:/Users/Lucie/git_repositories/spectre_numerique_lucie/core/ts_parser/parser.ts<<<<<<< SEARCH    private whileStatement(): ASTNode {        this.consume(TokenType.Punctuation, '(', 'Expect \'(\' after \'while\'.');        const condition = this.expression();        this.consume(TokenType.Punctuation, ')', 'Expect \')\' after while condition.');        this.consume(TokenType.Punctuation, '{', 'Expect \'{\' before while body.');        const body = this.block();        return new WhileStatementNode(condition, body);    }=======    private whileStatement(): ASTNode {        this.consume(TokenType.Punctuation, '(', 'Expect \'(\' after \'while\'.');        const condition = this.expression();        this.consume(TokenType.Punctuation, ')', 'Expect \')\' after while condition.');        this.consume(TokenType.Punctuation, '{', 'Expect \'{\' before while body.');        const body = this.block();        return new WhileStatementNode(condition, body);    }    private forStatement(): ASTNode {        this.consume(TokenType.Punctuation, '(', 'Expect \'(\' after \'for\'.');        let initializer: ASTNode | undefined;        if (!this.match(TokenType.Punctuation, ';')) {            initializer = this.declaration();        }        this.consume(TokenType.Punctuation, ';', 'Expect \';\' after loop initializer.');        let condition: ASTNode | undefined;        if (!this.check(TokenType.Punctuation, ';')) {            condition = this.expression();        }        this.consume(TokenType.Punctuation, ';', 'Expect \';\' after loop condition.');        let increment: ASTNode | undefined;        if (!this.check(TokenType.Punctuation, ')')) {            increment = this.expression();        }        this.consume(TokenType.Punctuation, ')', 'Expect \')\' after for clauses.');        this.consume(TokenType.Punctuation, '{', 'Expect \'{\' before for body.');        const body = this.block();        return new ForStatementNode(initializer, condition, increment, body);    }>>>>>>> REPLACE---file: C:/Users/Lucie/git_repositories/spectre_numerique_lucie/core/ts_parser/parser.ts<<<<<<< SEARCH        if (this.match(TokenType.Keyword, 'return')) {            return this.returnStatement();        }        // For now, just consume expressions        const expr = this.expression();        this.consume(TokenType.Punctuation, ';', 'Expect \';\' after expression.');        return expr;=======        if (this.match(TokenType.Keyword, 'return')) {            return this.returnStatement();        }        if (this.match(TokenType.Keyword, 'for')) {            return this.forStatement();        }        // For now, just consume expressions        const expr = this.expression();        this.consume(TokenType.Punctuation, ';', 'Expect \';\' after expression.');        return expr;>>>>>>> REPLACE