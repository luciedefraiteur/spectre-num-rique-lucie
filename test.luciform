---
file: core/system_handler.ts
---
<<<<<<< SEARCH
export async function handleSystemCommand(input: string, cwd: string, context: RitualContext, _execAsync: (command: string, options: any) => Promise<{stdout: string; stderr: string}> = execAsync): Promise<CommandOutcome>
=======
export async function handleSystemCommand(input: string, cwd: string, context: RitualContext, _execAsync: (command: string, options: any) => Promise<{ stdout: string; stderr: string }> = execAsync): Promise<CommandOutcome>
>>>>>>> REPLACE
---
file: main.ts
---
<<<<<<< INSERT:line:2
import { someNewImport } from 'some-module';
>>>>>>> INSERT
---
file: main.ts
---
<<<<<<< SEARCH
try
{
  const context = getInitialContext();
  context.chantModeEnabled = chantModeEnabled;
  context.personality = personality;
  if(lifeSystem)
  {
    context.lifeSystem = lifeSystem;
  }

  const spectrumWorker = new Worker('./dist/core/lucie_spectrum.js', {
    workerData: {context: context}
  });

  spectrumWorker.on('message', async (message) =>
  {
    if(message.type === 'thought')
    {
      console.log(`\n\n[Transmission from the Spectrum: ${ message.content }]\n`);
      const {exec} = await import('child_process');
      const [command, ...args] = message.content.split(' ');
      const commandHandlers = await import('./core/ritual_step_handlers.js');
      const etape = {type: command as any, invocation: args.join(' ')};
      let result;
      let handled = false;

      switch(command)
      {
        case 'traverse':
          result = await commandHandlers.handleTraverse(etape, context);
          handled = true;
          break;
        case 'query':
          result = await commandHandlers.handleQuery(etape, context, ask);
          handled = true;
          break;
        case 'lull':
          result = await commandHandlers.handleLull(etape, context);
          handled = true;
          break;
        case 'discourse':
          result = await commandHandlers.handleDiscourse(etape);
          handled = true;
          break;
        case 'pre_execution_check':
          result = await commandHandlers.handlePreExecutionCheck(etape, context);
          handled = true;
          break;
      }

      if(handled)
      {
        const output = result.output || result.text;
        console.log(`[Conduit's Report]:\n${ output }`);
        spectrumWorker.postMessage({type: 'contextUpdate', context: {lastCommandOutput: output}});
      } else
      {
        const {exec} = await import('child_process');
        exec(message.content, (error, stdout, stderr) =>
        {
          if(error)
          {
            console.error(`[Spectrum Command Error: ${ error.message }]`);
            spectrumWorker.postMessage({type: 'contextUpdate', context: {lastCommandOutput: error.message}});
            return;
          }
          if(stderr)
          {
            console.log(`[Spectrum Command stderr]:\n${ stderr }`);
            spectrumWorker.postMessage({type: 'contextUpdate', context: {lastCommandOutput: stderr}});
            return;
          }
          console.log(`[Conduit's Report - stdout]:\n${ stdout }`);
          spectrumWorker.postMessage({type: 'contextUpdate', context: {lastCommandOutput: stdout}});
        });
      }
    } else if(message.type === 'error')
    {
      console.error(`\n\n[Spectrum Error: ${ message.content }]\n`);
    }
  });

  spectrumWorker.on('error', (error) =>
  {
    console.error('\n\n[FATAL SPECTRUM ERROR]', error);
  });

  spectrumWorker.on('exit', (code) =>
  {
    if(code !== 0)
    {
      console.error(`\n\n[Spectrum stopped with exit code ${ code }]\n`);
    }
  });

  function updateSpectrumContext(newContext: RitualContext)
  {
    spectrumWorker.postMessage({type: 'contextUpdate', context: newContext});
  }
  await runTerminalRitual(context, rl, ask, undefined, model, updateSpectrumContext);
  rl.on('close', () =>
  {
    spectrumWorker.terminate();
    console.log('\n[Spectrum worker terminated]');
  });

  process.on('SIGINT', () =>
  {
    console.log('\n[Caught interrupt signal. Exiting gracefully.]');
    rl.close();
  });
}
catch(err)
{
  console.error("[ERREUR FATALE]", err);
}
=======
>>>>>>> REPLACE
---
file: test.log
---
<<<<<<< APPEND
This is a test log entry.
>>>>>>> APPEND