---
§F: execute_luciform.ts
<<<<<<< INSERT:line:1
import * as path from 'path';
>>>>>>> INSERT
---
§F: execute_luciform.ts
<<<<<<< SEARCH
async function parseLuciform(filePath: string): Promise<Operation[]> {
    const content = await fs.readFile(filePath, 'utf-8');
    const lines = content.replace(/\r\n/g, '\n').split('\n');
    const operations: Operation[] = [];
    let state: ParserState = 'idle';
    let currentFilePath: string | undefined;
    let searchContent = '';
    let newContent = '';
    let lineNumber: number | undefined;
    let startLine: number | undefined;
    let endLine: number | undefined;
    let currentSearchStartLine: number | undefined;

    for (const line of lines) {
        if (line.startsWith('---')) {
            continue;
        }

        if (line.startsWith('§F:')) {
            currentFilePath = line.substring(3).trim();
        } else if (line.startsWith('§X:')) {
            operations.push({ type: 'shell_command', command: line.substring(3).trim() });
        } else if (line.startsWith('§Q:')) {
            const question = line.substring(3).trim();
            const answer = await askQuestion(question + ' ');
            console.log(`Réponse de l'utilisateur : ${answer}`);
        } else if (line.startsWith('<<<<<<< §S')) {
            state = 'in_search';
            searchContent = '';
            const lineNumberMatch = line.match(/:line:(\d+)/);
            if (lineNumberMatch) {
                currentSearchStartLine = parseInt(lineNumberMatch[1], 10);
            }
        } else if (line.startsWith('======= §R') && state === 'in_search') {
            searchContent = searchContent.replace(/\r\n/g, '\n').replace(/\n$/, '');
            state = 'in_replace';
            newContent = '';
        } else if (line.startsWith('>>>>>>> §R') && state === 'in_replace') {
            if (currentFilePath) {
                operations.push({
                    type: 'search_and_replace',
                    filePath: currentFilePath,
                    startLine: currentSearchStartLine || 0,
                    search: searchContent,
                    replace: newContent.replace(/\n/g, '\n').replace(/\n$/, '')
                });
            }
            state = 'idle';
>>>>>>> SEARCH
======= REPLACE
async function parseLuciform(filePath: string): Promise<Operation[]> {
    console.log(`[DEBUG] parseLuciform: Raw filePath = ${filePath}`);
    const content = await fs.readFile(filePath, 'utf-8');
    const lines = content.replace(/\r\n/g, '\n').split('\n');
    const operations: Operation[] = [];
    let state: ParserState = 'idle';
    let currentFilePath: string | undefined;
    let searchContent = '';
    let newContent = '';
    let lineNumber: number | undefined;
    let startLine: number | undefined;
    let endLine: number | undefined;
    let currentSearchStartLine: number | undefined;

    for (const line of lines) {
        console.log(`[DEBUG] parseLuciform: Processing line: ${line.substring(0, 50)}...`);
        if (line.startsWith('---')) {
            continue;
        }

        if (line.startsWith('§F:')) {
            currentFilePath = path.resolve(line.substring(3).trim());
            console.log(`[DEBUG] parseLuciform: Resolved currentFilePath = ${currentFilePath}`);
        } else if (line.startsWith('§X:')) {
            const op = { type: 'shell_command', command: line.substring(3).trim() };
            operations.push(op);
            console.log(`[DEBUG] parseLuciform: Added operation: ${JSON.stringify(op)}`);
        } else if (line.startsWith('§Q:')) {
            const question = line.substring(3).trim();
            const answer = await askQuestion(question + ' ');
            console.log(`Réponse de l'utilisateur : ${answer}`);
        } else if (line.startsWith('<<<<<<< §S')) {
            state = 'in_search';
            searchContent = '';
            const lineNumberMatch = line.match(/:line:(\d+)/);
            if (lineNumberMatch) {
                currentSearchStartLine = parseInt(lineNumberMatch[1], 10);
            }
        } else if (line.startsWith('======= §R') && state === 'in_search') {
            searchContent = searchContent.replace(/\n/g, '\n').replace(/\n$/, '');
            state = 'in_replace';
            newContent = '';
        } else if (line.startsWith('>>>>>>> §R') && state === 'in_replace') {
            if (currentFilePath) {
                operations.push({
                    type: 'search_and_replace',
                    filePath: currentFilePath,
                    startLine: currentSearchStartLine || 0,
                    search: searchContent,
                    replace: newContent.replace(/\n/g, '\n').replace(/\n$/, '')
                });
            }
            state = 'idle';
>>>>>>> REPLACE
